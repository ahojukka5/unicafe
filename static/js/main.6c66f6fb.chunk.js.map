{"version":3,"sources":["index.js"],"names":["Statistic","text","value","unit","round","Row","Cell","textAlign","Math","Statistics","good","neutral","bad","all","avg","pos","basic","celled","fixed","unstackable","Body","ReactDOM","render","useState","setGood","setNeutral","setBad","style","paddingTop","paddingBottom","columns","Column","maxWidth","verticalAlign","width","src","as","attached","block","onClick","document","getElementById"],"mappings":"4PAeMA,EAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACtC,OACE,kBAAC,IAAMC,IAAP,KACE,kBAAC,IAAMC,KAAP,KAAaL,GACb,kBAAC,IAAMK,KAAP,CAAYC,UAAU,SACnBH,EAAQI,KAAKJ,MAAc,IAARF,GAAe,IAAMA,EAD3C,IACmDC,KAKnDM,EAAa,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,IAC7BC,EAAMH,EAAOC,EAAUC,EAC7B,GAAY,IAARC,EACF,OAAO,gDAET,IAAMC,EAAO,EAAID,GAAQH,EAAOE,GAC1BG,EAAOL,EAAOG,EAAO,IAC3B,OACE,kBAAC,IAAD,CAAOG,MAAM,OAAOC,QAAM,EAACC,OAAK,EAACC,aAAW,GAC1C,kBAAC,IAAMC,KAAP,KACE,kBAACpB,EAAD,CAAWC,KAAK,OAAOC,MAAOQ,IAC9B,kBAACV,EAAD,CAAWC,KAAK,UAAUC,MAAOS,IACjC,kBAACX,EAAD,CAAWC,KAAK,MAAMC,MAAOU,IAC7B,kBAACZ,EAAD,CAAWC,KAAK,MAAMC,MAAOW,IAC7B,kBAACb,EAAD,CAAWC,KAAK,UAAUC,MAAOY,EAAKV,OAAK,IAC3C,kBAACJ,EAAD,CAAWC,KAAK,WAAWC,MAAOa,EAAKX,OAAK,EAACD,KAAK,SA4D1DkB,IAASC,OAAO,mBAtDJ,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACTb,EADS,KACHc,EADG,OAEcD,mBAAS,GAFvB,mBAETZ,EAFS,KAEAc,EAFA,OAGMF,mBAAS,GAHf,mBAGTX,EAHS,KAGJc,EAHI,KAiBhB,OACE,kBAAC,IAAD,CAAWzB,MAAI,EAAC0B,MAAO,CAAEC,WAAY,MAAOC,cAAe,QACzD,kBAAC,IAAD,CAAMtB,UAAU,SAASuB,QAAS,GAChC,kBAAC,IAAKC,OAAN,CAAaJ,MAAO,CAAEK,SAAU,MAC9B,kBAAC,IAAD,CAAMF,QAAS,EAAGG,cAAc,UAC9B,kBAAC,IAAKF,OAAN,CAAaG,MAAO,GAClB,kBAAC,IAAD,CAAOC,IAAI,eAEb,kBAAC,IAAKJ,OAAN,CAAaG,MAAO,IAClB,kBAAC,IAAD,CAAQE,GAAG,MAAX,8BAKN,kBAAC,IAAKL,OAAN,CAAaJ,MAAO,CAAEK,SAAU,MAC9B,kBAAC,IAAD,CAAQI,GAAG,KAAKC,SAAS,MAAMC,OAAK,GAApC,iBAGA,kBAAC,IAAD,CAASD,UAAQ,GACf,kBAAC,IAAD,CAAQE,QA/BH,WACbf,EAAQd,EAAO,KA8BP,SACA,kBAAC,IAAD,CAAQ6B,QA5BA,WAChBd,EAAWd,EAAU,KA2Bb,WACA,kBAAC,IAAD,CAAQ4B,QAzBJ,WACZb,EAAOd,EAAM,KAwBL,SAGJ,kBAAC,IAAKmB,OAAN,CAAaJ,MAAO,CAAEK,SAAU,MAC9B,kBAAC,IAAD,CAAQI,GAAG,KAAKC,SAAS,MAAMC,OAAK,GAApC,cAGA,kBAAC,IAAD,CAASD,UAAQ,GACf,kBAAC5B,EAAD,CAAYC,KAAMA,EAAMC,QAASA,EAASC,IAAKA,UAQ3C,MAAS4B,SAASC,eAAe,W","file":"static/js/main.6c66f6fb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Image,\n  Table,\n  Segment,\n} from 'semantic-ui-react';\n\nconst Statistic = ({ text, value, unit, round }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>{text}</Table.Cell>\n      <Table.Cell textAlign=\"right\">\n        {round ? Math.round(value * 100) / 100 : value} {unit}\n      </Table.Cell>\n    </Table.Row>\n  );\n};\nconst Statistics = ({ good, neutral, bad }) => {\n  const all = good + neutral + bad;\n  if (all === 0) {\n    return <p>No feedback given</p>;\n  }\n  const avg = (1 / all) * (good - bad);\n  const pos = (good / all) * 100;\n  return (\n    <Table basic=\"very\" celled fixed unstackable>\n      <Table.Body>\n        <Statistic text=\"Good\" value={good} />\n        <Statistic text=\"Neutral\" value={neutral} />\n        <Statistic text=\"Bad\" value={bad} />\n        <Statistic text=\"All\" value={all} />\n        <Statistic text=\"Average\" value={avg} round />\n        <Statistic text=\"Positive\" value={pos} round unit=\"%\" />\n      </Table.Body>\n    </Table>\n  );\n};\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onGood = () => {\n    setGood(good + 1);\n  };\n\n  const onNeutral = () => {\n    setNeutral(neutral + 1);\n  };\n\n  const onBad = () => {\n    setBad(bad + 1);\n  };\n\n  return (\n    <Container text style={{ paddingTop: '1em', paddingBottom: '1em' }}>\n      <Grid textAlign=\"center\" columns={1}>\n        <Grid.Column style={{ maxWidth: 400 }}>\n          <Grid columns={2} verticalAlign=\"middle\">\n            <Grid.Column width={6}>\n              <Image src=\"/logo.png\" />\n            </Grid.Column>\n            <Grid.Column width={10}>\n              <Header as=\"h1\">Uniface feedback system</Header>\n            </Grid.Column>\n          </Grid>\n        </Grid.Column>\n\n        <Grid.Column style={{ maxWidth: 400 }}>\n          <Header as=\"h3\" attached=\"top\" block>\n            Give feedback\n          </Header>\n          <Segment attached>\n            <Button onClick={onGood}>Good </Button>\n            <Button onClick={onNeutral}>Neutral</Button>\n            <Button onClick={onBad}>Bad</Button>\n          </Segment>\n        </Grid.Column>\n        <Grid.Column style={{ maxWidth: 400 }}>\n          <Header as=\"h3\" attached=\"top\" block>\n            Statistics\n          </Header>\n          <Segment attached>\n            <Statistics good={good} neutral={neutral} bad={bad} />\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}